"""
Income Agent REACT - Versi√≥n Multi-Agente AUT√ìNOMA COMPLETA
Especializado en an√°lisis de cuenta de resultados con an√°lisis detallado
CARACTER√çSTICAS: Extracci√≥n avanzada, an√°lisis LLM especializado, respuestas extensas
"""

from __future__ import annotations
import os
import re
import json
import time
import argparse
from pathlib import Path
from typing import Any, Dict, List, Optional

import fitz  # PyMuPDF
import pandas as pd
from dotenv import load_dotenv
from openai import AzureOpenAI
import groq

# ===== CONFIGURACI√ìN DEL PROYECTO =====
project_root = Path(__file__).parent.parent
env_path = project_root / ".env"
load_dotenv(env_path)
os.chdir(project_root)

if not env_path.exists():
    print(f"Warning: Archivo .env no encontrado en {env_path}")

print("üîß Cargar .env desde el directorio ra√≠z del proyecto...")

# ----- Azure OpenAI Configuration -----
AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
AZURE_OPENAI_API_VERSION = os.getenv("AZURE_OPENAI_API_VERSION", "2024-10-21")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT", "gpt-4o")

print("üîß ----- Azure OpenAI Configuration -----")
print(f"üîó Endpoint: {AZURE_OPENAI_ENDPOINT}")
print(f"üîë API Key: {'‚úì' if AZURE_OPENAI_API_KEY else '‚úó'}")
print(f"üìã Deployment: {AZURE_OPENAI_DEPLOYMENT}")

# Validaci√≥n de credenciales
if not AZURE_OPENAI_ENDPOINT or not AZURE_OPENAI_API_KEY:
    raise ValueError("Azure OpenAI credentials required")

# ----- Groq Configuration -----
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GROQ_MODEL = os.getenv("GROQ_MODEL", "llama-3.3-70b-versatile")

print("üîß ----- Groq Configuration -----")
print(f"üîë API Key: {'‚úì' if GROQ_API_KEY else '‚úó'}")
print(f"ü§ñ Model: {GROQ_MODEL}")

# ===== CLIENTE CHAT =====
class ChatClient:
    def __init__(self):
        self.azure_client = AzureOpenAI(
            azure_endpoint=AZURE_OPENAI_ENDPOINT,
            api_key=AZURE_OPENAI_API_KEY,
            api_version=AZURE_OPENAI_API_VERSION
        ) if AZURE_OPENAI_API_KEY else None
        
        self.groq_client = groq.Groq(
            api_key=GROQ_API_KEY
        ) if GROQ_API_KEY else None

    def chat(self, history: List[Dict[str, str]], max_tokens: int = 1500) -> str:
        try:
            if self.groq_client:
                response = self.groq_client.chat.completions.create(
                    model=GROQ_MODEL,
                    messages=history,
                    max_tokens=max_tokens,
                    temperature=0.1
                )
                return response.choices[0].message.content
            
            elif self.azure_client:
                response = self.azure_client.chat.completions.create(
                    model=AZURE_OPENAI_DEPLOYMENT,
                    messages=history,
                    max_tokens=max_tokens,
                    temperature=0.1
                )
                return response.choices[0].message.content
                
        except Exception as e:
            raise RuntimeError(f"Chat API error: {str(e)}")

# Inicializaci√≥n del cliente
chat_client = ChatClient()

# ===== DICCIONARIOS ESPEC√çFICOS PARA CUENTA DE RESULTADOS =====
INCOME_TITLES_EN = [
    "income statement", "statement of income", "profit and loss",
    "consolidated income statement", "statement of profit or loss",
    "comprehensive income statement"
]

INCOME_TITLES_ES = [
    "cuenta de resultados", "estado de resultados", "cuenta de p√©rdidas y ganancias",
    "estado consolidado de resultados", "cuenta de resultado del ejercicio"
]

# T√©rminos espec√≠ficos de ingresos
REVENUE_HINTS = [
    "net interest income", "interest income", "fee and commission income",
    "trading income", "other operating income", "total income",
    "margen de intereses", "ingresos por intereses", "comisiones netas",
    "ingresos por operaciones", "otros ingresos", "margen bruto"
]

# T√©rminos espec√≠ficos de gastos
EXPENSE_HINTS = [
    "operating expenses", "staff costs", "personnel expenses",
    "administrative expenses", "depreciation", "amortization",
    "provisions", "loan loss provisions", "impairment losses",
    "gastos de explotaci√≥n", "gastos de personal", "gastos administrativos",
    "dotaciones", "provisiones", "deterioro"
]

# T√©rminos de rentabilidad
PROFIT_HINTS = [
    "profit before tax", "net profit", "earnings", "net income",
    "return on equity", "return on assets", "profit margin",
    "beneficio antes de impuestos", "beneficio neto", "resultado neto",
    "rentabilidad sobre patrimonio", "margen de beneficio"
]

# ===== FUNCIONES AUXILIARES MEJORADAS =====

def normalize_text(s: str) -> str:
    s = s or ""
    s = s.replace("\u00A0", " ")
    s = re.sub(r"\s+", " ", s)
    return s.strip().lower()

def detect_language(text: str) -> str:
    t = normalize_text(text)
    score_es = sum(1 for w in ["resultados", "ingresos", "gastos", "beneficio"] if w in t)
    score_en = sum(1 for w in ["income", "revenue", "expenses", "profit"] if w in t)
    return "es" if score_es >= score_en else "en"

def extract_comprehensive_income_data(text: str) -> Dict[str, List[float]]:
    """NUEVA FUNCI√ìN: Extrae datos financieros espec√≠ficos del texto con patrones avanzados"""
    
    patterns = {
        'net_interest_income': [
            r'margen.*intereses.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'net.*interest.*income.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'interest.*margin.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'‚Ç¨\s*([0-9.,]+).*margen.*intereses',
            r'‚Ç¨\s*([0-9.,]+).*net.*interest'
        ],
        'fee_commission_income': [
            r'comisiones.*netas.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'fee.*commission.*income.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'ingresos.*comisiones.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'‚Ç¨\s*([0-9.,]+).*comisiones',
            r'‚Ç¨\s*([0-9.,]+).*fee.*commission'
        ],
        'operating_expenses': [
            r'gastos.*explotaci√≥n.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'operating.*expenses.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'gastos.*operativos.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'‚Ç¨\s*([0-9.,]+).*gastos.*operativ',
            r'‚Ç¨\s*([0-9.,]+).*operating.*expenses'
        ],
        'staff_costs': [
            r'gastos.*personal.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'staff.*costs.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'personnel.*expenses.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'‚Ç¨\s*([0-9.,]+).*gastos.*personal',
            r'‚Ç¨\s*([0-9.,]+).*staff.*costs'
        ],
        'provisions': [
            r'dotaciones.*provisiones.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'loan.*loss.*provisions.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'impairment.*losses.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'provisiones.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'‚Ç¨\s*([0-9.,]+).*provisiones',
            r'‚Ç¨\s*([0-9.,]+).*provisions'
        ],
        'net_profit': [
            r'beneficio.*neto.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'net.*profit.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'net.*income.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'resultado.*neto.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'‚Ç¨\s*([0-9.,]+).*beneficio.*neto',
            r'‚Ç¨\s*([0-9.,]+).*net.*profit'
        ],
        'total_income': [
            r'margen.*bruto.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'total.*income.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'ingresos.*totales.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'total.*revenue.*‚Ç¨?\s*([0-9.,]+)\s*(?:miles|million|thousand)',
            r'‚Ç¨\s*([0-9.,]+).*margen.*bruto',
            r'‚Ç¨\s*([0-9.,]+).*total.*income'
        ]
    }
    
    extracted_data = {}
    
    # Buscar a√±os espec√≠ficos para comparaci√≥n
    years = re.findall(r'\b(20\d{2})\b', text)
    extracted_data['years_found'] = list(set(years))
    
    # Extraer datos por categor√≠a
    for category, pattern_list in patterns.items():
        values = []
        for pattern in pattern_list:
            matches = re.findall(pattern, text, re.IGNORECASE | re.MULTILINE)
            for match in matches:
                try:
                    # Limpiar y convertir n√∫meros
                    clean_number = re.sub(r'[^\d,.]', '', match)
                    if clean_number and clean_number not in ['', '.', ',']:
                        # Manejar formato europeo (1.234,56) y americano (1,234.56)
                        if ',' in clean_number and '.' in clean_number:
                            if clean_number.rindex(',') > clean_number.rindex('.'):
                                # Formato europeo: 1.234,56
                                clean_number = clean_number.replace('.', '').replace(',', '.')
                            # Si es formato americano (1,234.56), ya est√° bien
                        elif ',' in clean_number:
                            # Solo coma: podr√≠a ser decimal o separador miles
                            if len(clean_number.split(',')[-1]) <= 2:
                                # Probablemente decimal: 1234,56
                                clean_number = clean_number.replace(',', '.')
                            else:
                                # Probablemente separador miles: 1,234
                                clean_number = clean_number.replace(',', '')
                        
                        number = float(clean_number)
                        if number > 0:  # Solo valores positivos significativos
                            values.append(number)
                except ValueError:
                    continue
        
        # Remover duplicados manteniendo orden
        unique_values = []
        for v in values:
            if v not in unique_values:
                unique_values.append(v)
        
        extracted_data[category] = unique_values
    
    return extracted_data

def calculate_financial_ratios(data: Dict[str, List[float]]) -> Dict[str, float]:
    """NUEVA FUNCI√ìN: Calcular ratios financieros autom√°ticamente"""
    
    ratios = {}
    
    # Obtener valores principales (√∫ltimo valor de cada lista)
    net_profit = max(data.get('net_profit', [0])) if data.get('net_profit') else 0
    total_income = max(data.get('total_income', [0])) if data.get('total_income') else 0
    operating_expenses = max(data.get('operating_expenses', [0])) if data.get('operating_expenses') else 0
    net_interest_income = max(data.get('net_interest_income', [0])) if data.get('net_interest_income') else 0
    staff_costs = max(data.get('staff_costs', [0])) if data.get('staff_costs') else 0
    
    # Calcular ratios si hay datos disponibles
    if total_income > 0:
        if net_profit > 0:
            ratios['net_profit_margin'] = (net_profit / total_income) * 100
            
        if operating_expenses > 0:
            ratios['cost_income_ratio'] = (operating_expenses / total_income) * 100
            ratios['efficiency_ratio'] = (operating_expenses / total_income) * 100
            
        if net_interest_income > 0:
            ratios['interest_income_ratio'] = (net_interest_income / total_income) * 100
            
        if staff_costs > 0:
            ratios['staff_cost_ratio'] = (staff_costs / total_income) * 100
    
    # Calcular variaciones si hay datos de m√∫ltiples a√±os
    for category, values in data.items():
        if len(values) >= 2:
            # Calcular crecimiento a√±o-a√±o
            growth = ((values[-1] - values[0]) / abs(values[0])) * 100 if values[0] != 0 else 0
            ratios[f'{category}_growth'] = growth
    
    return ratios

# ===== CLASE WRAPPER AUT√ìNOMA PARA SISTEMA MULTI-AGENTE - INCOME =====

class IncomeREACTAgent:
    """
    Wrapper REACT COMPLETAMENTE AUT√ìNOMO para el Income Agent
    
    Esta clase es completamente aut√≥noma y genera respuestas espec√≠ficas usando LLM
    bas√°ndose en los datos de cuenta de resultados que extrae.
    """
    
    def __init__(self):
        self.agent_type = "income"
        self.max_steps = 25  # Aumentado para el wrapper
        self.chat_client = chat_client

    def run_final_financial_extraction_agent(self, pdf_path: str, question: str = None) -> Dict[str, Any]:
        """Ejecuta la extracci√≥n de cuenta de resultados con wrapper aut√≥nomo"""
        try:
            print(f"üîß IncomeREACTAgent AUT√ìNOMO iniciando extracci√≥n para: {pdf_path}")
            
            pdf_file = Path(pdf_path)
            output_dir = Path("data/salida")
            output_dir.mkdir(parents=True, exist_ok=True)
            
            start_time = time.time()
            
            # EXTRACCI√ìN MEJORADA
            extraction_result = self.extract_income_data_enhanced(pdf_file)
            
            if not extraction_result.get("success"):
                return {
                    "status": "error",
                    "steps_taken": 1,
                    "session_id": f"income_{pdf_file.stem}",
                    "final_response": f"Income extraction failed: {extraction_result.get('error')}",
                    "agent_type": "income",
                    "error_details": extraction_result.get("error"),
                    "specific_answer": "No se encontraron datos de cuenta de resultados"
                }
            
            # VALIDACI√ìN MEJORADA
            validation_result = self.validate_income_data_enhanced(extraction_result)
            
            # GUARDAR RESULTADOS MEJORADOS
            save_result = self.save_income_results_enhanced(pdf_file, output_dir, extraction_result, validation_result)
            
            # GENERAR RESPUESTA ESPEC√çFICA MEJORADA
            if question:
                print(f"‚ùì Pregunta espec√≠fica recibida: {question}")
            
            specific_answer = self.generate_enhanced_income_analysis(question, extraction_result, validation_result)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            print("‚úÖ Income extraction completed successfully (AUT√ìNOMO)")
            
            return {
                "status": "task_completed",
                "steps_taken": 5,  # An√°lisis, extracci√≥n, validaci√≥n, guardado, respuesta
                "session_id": f"income_{pdf_file.stem}",
                "final_response": "Income extraction completed successfully - AUTONOMOUS VERSION",
                "agent_type": "income",
                "files_generated": save_result.get("files_created", 3),
                "processing_time": processing_time,
                "specific_answer": specific_answer,
                "extraction_summary": {
                    "total_characters": extraction_result.get("total_characters", 0),
                    "financial_data_categories": len(extraction_result.get("financial_data", {})),
                    "confidence": validation_result.get("confidence", 0.8),
                    "quality": validation_result.get("quality", "unknown")
                }
            }
            
        except Exception as e:
            print(f"‚ùå Error en IncomeREACTAgent: {str(e)}")
            return {
                "status": "error",
                "steps_taken": 0,
                "session_id": "income_error",
                "final_response": f"Error in income extraction: {str(e)}",
                "agent_type": "income",
                "error_details": str(e),
                "specific_answer": f"Error durante la extracci√≥n de la cuenta de resultados: {str(e)}"
            }

    def extract_income_data_enhanced(self, pdf_file: Path) -> Dict[str, Any]:
        """NUEVA FUNCI√ìN: Extracci√≥n mejorada de datos de cuenta de resultados"""
        try:
            print(f"üîç Extrayendo cuenta de resultados de: {pdf_file}")
            
            # P√°ginas m√°s probables para cuenta de resultados en documentos bancarios
            target_pages = [1, 2, 3, 4, 5, 6, 7, 8]  # Ampliar b√∫squeda
            
            extracted_text = ""
            total_chars = 0
            financial_data = {}
            relevant_pages = []
            
            with fitz.open(pdf_file) as pdf:
                for page_num in range(min(len(pdf), 15)):  # Buscar en primeras 15 p√°ginas
                    page = pdf[page_num]
                    text = page.get_text()
                    text_lower = normalize_text(text)
                    
                    # Detectar relevancia para cuenta de resultados
                    relevance_score = 0
                    
                    # Buscar t√≠tulos espec√≠ficos
                    title_indicators = INCOME_TITLES_EN + INCOME_TITLES_ES
                    for indicator in title_indicators:
                        if normalize_text(indicator) in text_lower:
                            relevance_score += 10
                    
                    # Buscar t√©rminos de ingresos
                    for hint in REVENUE_HINTS:
                        if normalize_text(hint) in text_lower:
                            relevance_score += 3
                    
                    # Buscar t√©rminos de gastos
                    for hint in EXPENSE_HINTS:
                        if normalize_text(hint) in text_lower:
                            relevance_score += 3
                    
                    # Buscar t√©rminos de rentabilidad
                    for hint in PROFIT_HINTS:
                        if normalize_text(hint) in text_lower:
                            relevance_score += 5
                    
                    # Si la p√°gina es relevante, extraer
                    if relevance_score >= 5 or page_num + 1 in target_pages:
                        extracted_text += f"\n=== P√ÅGINA {page_num + 1} (Score: {relevance_score}) ===\n{text}"
                        total_chars += len(text)
                        relevant_pages.append(page_num + 1)
                        print(f"‚úÖ P√°gina {page_num + 1}: {len(text)} caracteres extra√≠dos (relevance: {relevance_score})")
                        
                        # NUEVA: Extracci√≥n de datos financieros espec√≠ficos
                        page_financial_data = extract_comprehensive_income_data(text)
                        for key, values in page_financial_data.items():
                            if key not in financial_data:
                                financial_data[key] = []
                            financial_data[key].extend(values)
            
            # Si no se encontr√≥ contenido relevante, extraer p√°ginas por defecto
            if total_chars < 1000:
                print("‚ö†Ô∏è Poco contenido relevante encontrado, extrayendo p√°ginas por defecto...")
                with fitz.open(pdf_file) as pdf:
                    for page_num in range(min(10, len(pdf))):
                        page = pdf[page_num]
                        text = page.get_text()
                        extracted_text += f"\n=== P√ÅGINA {page_num + 1} (DEFAULT) ===\n{text}"
                        total_chars += len(text)
            
            print(f"üìä Texto total extra√≠do: {total_chars} caracteres de {len(relevant_pages)} p√°ginas")
            
            # NUEVA: Extracci√≥n total mejorada
            if financial_data:
                total_extracted = sum(len(values) for values in financial_data.values() if values)
                print(f"üìà Total extra√≠do: {total_extracted} entradas financieras")
            
            confidence = 1.0 if total_chars > 3000 else 0.8 if total_chars > 1500 else 0.6
            
            return {
                "success": True,
                "text": extracted_text,
                "total_characters": total_chars,
                "pages_processed": relevant_pages,
                "financial_data": financial_data,  # NUEVO
                "confidence": confidence,
                "language": detect_language(extracted_text)
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}

    def validate_income_data_enhanced(self, extraction: Dict[str, Any]) -> Dict[str, Any]:
        """NUEVA FUNCI√ìN: Validaci√≥n mejorada de datos de cuenta de resultados"""
        try:
            text = extraction.get("text", "")
            confidence = extraction.get("confidence", 0.0)
            financial_data = extraction.get("financial_data", {})
            
            # Criterios de validaci√≥n mejorados
            quality_score = 0
            validation_details = []
            
            text_lower = normalize_text(text)
            
            # Verificar secciones principales (peso variable)
            if any(normalize_text(term) in text_lower for term in ["interest income", "margen intereses", "ingresos intereses"]):
                quality_score += 20
                validation_details.append("‚úÖ Ingresos por intereses encontrados")
            
            if any(normalize_text(term) in text_lower for term in ["commission", "comisiones", "fee income"]):
                quality_score += 15
                validation_details.append("‚úÖ Ingresos por comisiones encontrados")
            
            if any(normalize_text(term) in text_lower for term in ["operating expenses", "gastos explotaci√≥n", "gastos operativos"]):
                quality_score += 20
                validation_details.append("‚úÖ Gastos operativos encontrados")
            
            if any(normalize_text(term) in text_lower for term in ["staff costs", "gastos personal", "personnel expenses"]):
                quality_score += 15
                validation_details.append("‚úÖ Gastos de personal encontrados")
            
            if any(normalize_text(term) in text_lower for term in ["provisions", "provisiones", "impairment"]):
                quality_score += 10
                validation_details.append("‚úÖ Provisiones encontradas")
            
            if any(normalize_text(term) in text_lower for term in ["net profit", "beneficio neto", "net income"]):
                quality_score += 15
                validation_details.append("‚úÖ Beneficio neto encontrado")
            
            # NUEVA: Bonificaciones por datos financieros espec√≠ficos
            if financial_data:
                categories_with_data = sum(1 for values in financial_data.values() if values)
                data_bonus = min(15, categories_with_data * 2)  # M√°ximo 15 puntos extra
                quality_score += data_bonus
                validation_details.append(f"‚úÖ Datos financieros espec√≠ficos: {categories_with_data} categor√≠as")
            
            # Determinar calidad final
            if quality_score >= 80:
                quality = "excellent"
            elif quality_score >= 60:
                quality = "good"
            elif quality_score >= 40:
                quality = "fair"
            else:
                quality = "poor"
            
            final_confidence = min(confidence + (quality_score / 100 * 0.3), 1.0)
            
            print(f"‚úÖ Validaci√≥n completada: {quality} (puntuaci√≥n: {quality_score}/100, confianza: {final_confidence:.3f})")
            
            return {
                "success": True,
                "quality": quality,
                "confidence": final_confidence,
                "score": quality_score,
                "details": validation_details,
                "financial_categories_found": len([k for k, v in financial_data.items() if v]) if financial_data else 0
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}

    def save_income_results_enhanced(self, pdf_file: Path, output_dir: Path, extraction: Dict, validation: Dict) -> Dict[str, Any]:
        """NUEVA FUNCI√ìN: Guardar resultados mejorados"""
        try:
            base_name = pdf_file.stem
            files_created = 0
            
            # 1. Guardar resumen JSON extendido
            summary = {
                "extraction": {
                    "total_characters": extraction.get("total_characters", 0),
                    "pages_processed": extraction.get("pages_processed", []),
                    "financial_data": extraction.get("financial_data", {}),
                    "confidence": extraction.get("confidence", 0.8),
                    "language": extraction.get("language", "unknown")
                },
                "validation": validation,
                "processing_timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "quality_metrics": {
                    "data_categories_found": validation.get("financial_categories_found", 0),
                    "quality_score": validation.get("score", 0),
                    "final_confidence": validation.get("confidence", 0.8)
                }
            }
            
            summary_file = output_dir / f"{base_name}_income_summary.json"
            with open(summary_file, "w", encoding="utf-8") as f:
                json.dump(summary, f, indent=2, ensure_ascii=False)
            files_created += 1
            
            # 2. Guardar datos financieros espec√≠ficos
            if extraction.get("financial_data"):
                financial_data_file = output_dir / f"{base_name}_financial_data.json"
                with open(financial_data_file, "w", encoding="utf-8") as f:
                    json.dump(extraction["financial_data"], f, indent=2, ensure_ascii=False)
                files_created += 1
            
            # 3. Guardar reporte de calidad extendido
            quality_report = f"""
REPORTE DE CALIDAD EXTENDIDO - CUENTA DE RESULTADOS
==================================================
PDF: {pdf_file.name}
Fecha: {time.strftime("%Y-%m-%d %H:%M:%S")}

RESULTADOS DE VALIDACI√ìN:
- Calidad: {validation.get('quality', 'unknown')}
- Puntuaci√≥n: {validation.get('score', 0)}/100
- Confianza final: {validation.get('confidence', 0):.3f}
- Categor√≠as financieras: {validation.get('financial_categories_found', 0)}

DETALLES DE VALIDACI√ìN:
{chr(10).join(validation.get('details', []))}

EXTRACCI√ìN DETALLADA:
- Caracteres procesados: {extraction.get('total_characters', 0)}
- P√°ginas procesadas: {extraction.get('pages_processed', [])}
- Idioma detectado: {extraction.get('language', 'unknown')}
- Datos financieros extra√≠dos:
{json.dumps(extraction.get('financial_data', {}), indent=2)}

M√âTRICAS DE CALIDAD:
- Cobertura de secciones: {'Completa' if validation.get('score', 0) >= 70 else 'Parcial' if validation.get('score', 0) >= 50 else 'Limitada'}
- Precisi√≥n de extracci√≥n: {validation.get('confidence', 0.8)*100:.1f}%
- Recomendaci√≥n: {'An√°lisis confiable' if validation.get('score', 0) >= 60 else 'Requiere revisi√≥n manual'}
"""
            
            quality_file = output_dir / f"{base_name}_income_quality.txt"
            with open(quality_file, "w", encoding="utf-8") as f:
                f.write(quality_report)
            files_created += 1
            
            print(f"üíæ Archivos guardados: {files_created}")
            
            return {
                "success": True,
                "files_created": files_created,
                "output_directory": str(output_dir)
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}

    def generate_enhanced_income_analysis(self, question: str, extraction: Dict, validation: Dict) -> str:
        """NUEVA FUNCI√ìN: Genera an√°lisis extendido y detallado con LLM especializado"""
        try:
            text = extraction.get("text", "")
            confidence = validation.get("confidence", 0.8)
            quality = validation.get("quality", "unknown")
            financial_data = extraction.get("financial_data", {})
            
            if not text or len(text.strip()) < 300:
                return "El contenido extra√≠do de la cuenta de resultados es insuficiente para realizar un an√°lisis detallado profesional."
            
            # Calcular ratios financieros
            ratios = calculate_financial_ratios(financial_data) if financial_data else {}
            
            # AN√ÅLISIS INTELIGENTE CON LLM - PROMPT ESPECIALIZADO PARA CUENTA DE RESULTADOS
            analysis_prompt = f"""
Act√∫a como un analista financiero senior especializado en banca internacional con 15 a√±os de experiencia en an√°lisis de cuentas de resultados.

Analiza de forma EXHAUSTIVA y DETALLADA el siguiente contenido extra√≠do de la cuenta de resultados de GarantiBank International N.V./BBVA:

CONTENIDO EXTRA√çDO DEL PDF:
{text[:4000]}

DATOS FINANCIEROS ESPEC√çFICOS IDENTIFICADOS:
{json.dumps(financial_data, indent=2) if financial_data else "No se identificaron datos num√©ricos espec√≠ficos"}

RATIOS FINANCIEROS CALCULADOS:
{json.dumps(ratios, indent=2) if ratios else "No se pudieron calcular ratios espec√≠ficos"}

INSTRUCCIONES PARA AN√ÅLISIS PROFESIONAL BANCARIO:

1. **Estructura tu an√°lisis en las siguientes secciones obligatorias:**
   - Resumen ejecutivo de la rentabilidad y performance financiera
   - An√°lisis detallado del margen de intereses (principal fuente de ingresos bancarios)
   - Evaluaci√≥n de ingresos por comisiones y servicios
   - An√°lisis de gastos operativos y eficiencia
   - Evaluaci√≥n de provisiones y calidad crediticia
   - An√°lisis de rentabilidad y m√°rgenes (ROE, ROA, si calculables)
   - Comparaci√≥n con per√≠odos anteriores (si datos disponibles)
   - Identificaci√≥n de riesgos y oportunidades estrat√©gicas
   - Conclusiones y recomendaciones para la gesti√≥n

2. **Utiliza √öNICAMENTE las cifras y datos presentes en el texto extra√≠do:**
   - Cita cifras exactas cuando est√©n disponibles (ej: "‚Ç¨1,025k en 2023")
   - NO inventes n√∫meros que no aparezcan en el contenido
   - Si una cifra no est√° disponible, menciona "requiere datos adicionales"
   - Usa los ratios calculados autom√°ticamente cuando est√©n disponibles

3. **Proporciona interpretaci√≥n profesional espec√≠fica para banca:**
   - Explica el significado de variaciones en margen de intereses
   - Analiza la diversificaci√≥n de ingresos (intereses vs comisiones)
   - Eval√∫a la eficiencia operativa (cost-income ratio)
   - Comenta sobre la calidad crediticia basada en provisiones
   - Relaciona con estrategia bancaria y entorno regulatorio

4. **Formato profesional y t√©cnico:**
   - Usa terminolog√≠a t√©cnica apropiada para entidades financieras
   - Estructura clara con subt√≠tulos descriptivos
   - P√°rrafos bien desarrollados con argumentaci√≥n s√≥lida
   - Longitud objetivo: 800-1000 palabras

5. **Enfoque espec√≠fico bancario:**
   - Considera particularidades del sector financiero
   - Analiza impacto de tasas de inter√©s en resultados
   - Eval√∫a calidad de los ingresos recurrentes vs no recurrentes
   - Comenta sobre cumplimiento regulatorio y capital
   - Identifica tendencias del mercado bancario

Genera un an√°lisis que demuestre expertise profesional avanzado, √∫til tanto para el comit√© de direcci√≥n como para stakeholders externos, con insights accionables y recomendaciones estrat√©gicas espec√≠ficas.
"""

            try:
                # Usar el LLM para generar an√°lisis inteligente
                analysis_response = self.chat_client.chat([
                    {"role": "system", "content": "Eres un analista financiero senior con maestr√≠a en finanzas y 15+ a√±os especializ√°ndote en an√°lisis de cuentas de resultados de entidades bancarias internacionales."},
                    {"role": "user", "content": analysis_prompt}
                ], max_tokens=2200)  # Aumentado para respuestas m√°s extensas
                
                # Construir respuesta final con informaci√≥n t√©cnica expandida
                response_parts = [
                    "üìä **AN√ÅLISIS PROFESIONAL DE CUENTA DE RESULTADOS - GarantiBank International N.V.**",
                    "=" * 90,
                    "",
                    analysis_response,
                    "",
                    "### üìã **INFORMACI√ìN T√âCNICA Y METODOL√ìGICA DEL AN√ÅLISIS**",
                    f"‚Ä¢ **Calidad de extracci√≥n**: {quality.title()} (puntuaci√≥n: {validation.get('score', 0)}/100)",
                    f"‚Ä¢ **Confianza en datos**: {confidence:.1%}",
                    f"‚Ä¢ **Caracteres analizados**: {len(text):,} del documento original",
                    f"‚Ä¢ **P√°ginas procesadas**: {len(extraction.get('pages_processed', []))} p√°ginas del estado financiero",
                    f"‚Ä¢ **Categor√≠as financieras identificadas**: {len([k for k, v in financial_data.items() if v])} de 7 principales" if financial_data else "‚Ä¢ **Datos financieros**: An√°lisis basado en contenido textual estructurado",
                    f"‚Ä¢ **Ratios calculados**: {len(ratios)} indicadores financieros" if ratios else "‚Ä¢ **Ratios**: No calculables con datos actuales",
                    f"‚Ä¢ **Idioma del documento**: {extraction.get('language', 'Desconocido').title()}",
                    "‚Ä¢ **Metodolog√≠a**: Extracci√≥n autom√°tica + an√°lisis con IA especializada en banca",
                    "‚Ä¢ **Fuente**: Cuenta de resultados consolidada de GarantiBank International N.V.",
                    "‚Ä¢ **Est√°ndares**: An√°lisis conforme a mejores pr√°cticas de an√°lisis financiero bancario",
                    "",
                    "=" * 90,
                    "üìä *An√°lisis generado por sistema de IA especializada en an√°lisis de rentabilidad bancaria*"
                ]
                
                return "\n".join(response_parts)
                
            except Exception as llm_error:
                print(f"Error en an√°lisis LLM: {str(llm_error)}")
                # Fallback: an√°lisis b√°sico si el LLM falla
                return self.generate_fallback_income_analysis(text, confidence, quality, financial_data, ratios)
                
        except Exception as e:
            return f"Error al generar an√°lisis espec√≠fico de cuenta de resultados: {str(e)}"

    def generate_fallback_income_analysis(self, text: str, confidence: float, quality: str, 
                                        financial_data: Dict, ratios: Dict) -> str:
        """An√°lisis de respaldo basado en extracci√≥n de datos espec√≠ficos"""
        
        response_parts = []
        response_parts.append("üìä **AN√ÅLISIS DE CUENTA DE RESULTADOS - GarantiBank International N.V.**")
        response_parts.append("=" * 75)
        
        text_lower = normalize_text(text)
        
        # An√°lisis de ingresos principales
        response_parts.append("\n### üí∞ **AN√ÅLISIS DE INGRESOS PRINCIPALES**")
        
        # Margen de intereses
        if financial_data.get('net_interest_income'):
            amounts = financial_data['net_interest_income']
            response_parts.append(f"‚Ä¢ **Margen de intereses**: {amounts} (miles de euros)")
            if 'net_interest_income_growth' in ratios:
                growth = ratios['net_interest_income_growth']
                response_parts.append(f"  - Variaci√≥n: {growth:+.1f}% respecto per√≠odo anterior")
        elif any(term in text_lower for term in ["interest", "intereses"]):
            response_parts.append("‚Ä¢ **Margen de intereses**: Identificado como fuente principal de ingresos bancarios")
        
        # Comisiones
        if financial_data.get('fee_commission_income'):
            amounts = financial_data['fee_commission_income']
            response_parts.append(f"‚Ä¢ **Ingresos por comisiones**: {amounts} (miles de euros)")
            if 'fee_commission_income_growth' in ratios:
                growth = ratios['fee_commission_income_growth']
                response_parts.append(f"  - Variaci√≥n: {growth:+.1f}% respecto per√≠odo anterior")
                if growth < -50:
                    response_parts.append("  - ‚ö†Ô∏è ATENCI√ìN: Ca√≠da significativa que requiere an√°lisis estrat√©gico")
        elif any(term in text_lower for term in ["commission", "comisiones"]):
            response_parts.append("‚Ä¢ **Ingresos por comisiones**: Fuente complementaria de ingresos identificada")
        
        # An√°lisis de gastos
        response_parts.append("\n### üí∏ **AN√ÅLISIS DE GASTOS OPERATIVOS**")
        
        if financial_data.get('operating_expenses'):
            amounts = financial_data['operating_expenses']
            response_parts.append(f"‚Ä¢ **Gastos operativos**: {amounts} (miles de euros)")
            if 'efficiency_ratio' in ratios:
                efficiency = ratios['efficiency_ratio']
                response_parts.append(f"  - Ratio de eficiencia: {efficiency:.1f}%")
                if efficiency < 50:
                    response_parts.append("  - ‚úÖ Eficiencia operativa superior al promedio sectorial")
                elif efficiency > 60:
                    response_parts.append("  - ‚ö†Ô∏è Oportunidades de mejora en eficiencia operativa")
        
        if financial_data.get('staff_costs'):
            amounts = financial_data['staff_costs']
            response_parts.append(f"‚Ä¢ **Gastos de personal**: {amounts} (miles de euros)")
            if 'staff_cost_ratio' in ratios:
                staff_ratio = ratios['staff_cost_ratio']
                response_parts.append(f"  - Ratio sobre ingresos: {staff_ratio:.1f}%")
        
        # Provisiones y calidad crediticia
        response_parts.append("\n### üõ°Ô∏è **PROVISIONES Y CALIDAD CREDITICIA**")
        
        if financial_data.get('provisions'):
            amounts = financial_data['provisions']
            response_parts.append(f"‚Ä¢ **Provisiones**: {amounts} (miles de euros)")
            response_parts.append("‚Ä¢ Las provisiones reflejan la gesti√≥n prudente del riesgo crediticio")
        elif any(term in text_lower for term in ["provision", "provisiones"]):
            response_parts.append("‚Ä¢ **Provisiones**: Identificadas como parte de la gesti√≥n de riesgos")
        
        # Rentabilidad
        response_parts.append("\n### üìà **AN√ÅLISIS DE RENTABILIDAD**")
        
        if financial_data.get('net_profit'):
            amounts = financial_data['net_profit']
            response_parts.append(f"‚Ä¢ **Beneficio neto**: {amounts} (miles de euros)")
            if 'net_profit_margin' in ratios:
                margin = ratios['net_profit_margin']
                response_parts.append(f"  - Margen neto: {margin:.1f}%")
                if margin > 15:
                    response_parts.append("  - ‚úÖ Rentabilidad s√≥lida para el sector bancario")
                elif margin < 10:
                    response_parts.append("  - ‚ö†Ô∏è Margen por debajo del promedio sectorial")
        
        # Ratios adicionales
        if ratios:
            response_parts.append("\n### üìä **RATIOS FINANCIEROS CALCULADOS**")
            for ratio_name, value in ratios.items():
                if not ratio_name.endswith('_growth'):
                    response_parts.append(f"‚Ä¢ **{ratio_name.replace('_', ' ').title()}**: {value:.2f}%")
        
        # Conclusiones
        response_parts.append("\n### üéØ **CONCLUSIONES BASADAS EN DATOS EXTRA√çDOS**")
        response_parts.append(f"‚Ä¢ **Calidad del an√°lisis**: {quality.title()} con {confidence:.1%} de confianza")
        response_parts.append(f"‚Ä¢ **Contenido procesado**: {len(text):,} caracteres de informaci√≥n financiera")
        
        if financial_data:
            categories_found = len([k for k, v in financial_data.items() if v])
            response_parts.append(f"‚Ä¢ **Datos espec√≠ficos**: {categories_found} categor√≠as financieras identificadas")
            
            # Identificar tendencias principales
            declining_categories = []
            growing_categories = []
            for category, values in financial_data.items():
                if len(values) >= 2:
                    if values[-1] < values[0]:
                        declining_categories.append(category.replace('_', ' '))
                    else:
                        growing_categories.append(category.replace('_', ' '))
            
            if declining_categories:
                response_parts.append(f"‚Ä¢ **Tendencias descendentes**: {', '.join(declining_categories)}")
            if growing_categories:
                response_parts.append(f"‚Ä¢ **Tendencias ascendentes**: {', '.join(growing_categories)}")
        else:
            response_parts.append("‚Ä¢ **Recomendaci√≥n**: Se requiere acceso a cifras num√©ricas espec√≠ficas para an√°lisis cuantitativo completo")
        
        response_parts.append("\n‚Ä¢ **Metodolog√≠a**: An√°lisis automatizado basado en contenido extra√≠do y patrones financieros")
        response_parts.append("‚Ä¢ **Fuente**: Cuenta de resultados consolidada de GarantiBank International N.V.")
        response_parts.append("‚Ä¢ **Nota**: Para an√°lisis m√°s profundo se recomienda acceso a datos hist√≥ricos completos")
        
        return "\n".join(response_parts)

# ===== CONFIGURACI√ìN Y MAIN =====
DEFAULT_CONFIG = {
    "pdf": "data/entrada/output/bbva_2023_div.pdf",
    "out": "data/salida", 
    "maxsteps": 25
}

def main():
    parser = argparse.ArgumentParser(
        description="Income Agent AUT√ìNOMO con An√°lisis Detallado - Multi-Agent System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplo de uso:
  python agents/income_agent.py                    # Usa configuraci√≥n predefinida
  python agents/income_agent.py --pdf otro.pdf    # Sobreescribe PDF

CARACTER√çSTICAS AVANZADAS:
  - An√°lisis detallado de 800-1000 palabras generado por LLM especializado
  - Extracci√≥n autom√°tica de cifras financieras espec√≠ficas
  - C√°lculo autom√°tico de ratios bancarios (eficiencia, rentabilidad, crecimiento)
  - Validaci√≥n mejorada con puntuaci√≥n de calidad detallada
  - An√°lisis fallback robusto basado en datos extra√≠dos

MEJORAS IMPLEMENTADAS:
  - B√∫squeda inteligente por relevancia de p√°ginas
  - Identificaci√≥n autom√°tica de cifras de ingresos, gastos, y rentabilidad
  - An√°lisis profesional con terminolog√≠a bancaria especializada
  - C√°lculo de variaciones interanuales autom√°tico
  - Informes de calidad t√©cnicos extendidos
  - Respuestas estructuradas con insights accionables
"""
    )
    
    # Argumentos opcionales
    parser.add_argument("--pdf", default=DEFAULT_CONFIG["pdf"], 
                       help=f"Ruta al PDF (por defecto: {DEFAULT_CONFIG['pdf']})")
    parser.add_argument("--out", default=DEFAULT_CONFIG["out"],
                       help=f"Directorio de salida (por defecto: {DEFAULT_CONFIG['out']})")
    parser.add_argument("--maxsteps", type=int, default=DEFAULT_CONFIG["maxsteps"],
                       help=f"M√°ximo pasos (por defecto: {DEFAULT_CONFIG['maxsteps']})")
    parser.add_argument("--question", type=str, default=None,
                       help="Pregunta espec√≠fica sobre cuenta de resultados")
    
    args = parser.parse_args()
    
    # MOSTRAR CONFIGURACI√ìN
    print("üöÄ Income Agent v4.0 AUT√ìNOMO Multi-Agent - An√°lisis Detallado")
    print(f"üìÑ PDF: {args.pdf}")
    print(f"üìÅ Salida: {args.out}")
    print(f"‚öôÔ∏è Groq/Azure OpenAI: Configuraci√≥n optimizada")
    print(f"üîß Max steps: {args.maxsteps}")
    print("üÜï CARACTER√çSTICAS: An√°lisis extenso con LLM, extracci√≥n avanzada, ratios autom√°ticos")
    
    try:
        # VERIFICAR PDF
        pdf_path = Path(args.pdf)
        output_dir = Path(args.out)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        if not pdf_path.exists():
            print(f"‚ùå Error: PDF no encontrado en {pdf_path}")
            return
        
        # CREAR AGENTE Y EJECUTAR
        agent = IncomeREACTAgent()
        
        if args.question:
            print(f"‚ùì Pregunta espec√≠fica: {args.question}")
            result = agent.run_final_financial_extraction_agent(str(pdf_path), args.question)
        else:
            result = agent.run_final_financial_extraction_agent(str(pdf_path))
        
        # MOSTRAR RESULTADOS
        print("üéØ ==== RESUMEN DE EJECUCI√ìN AUT√ìNOMO ====")
        print(f"Estado: {'‚úÖ EXITOSO' if result.get('status') == 'task_completed' else '‚ùå ERROR'}")
        print(f"Pasos completados: {result.get('steps_taken', 0)}")
        print(f"Archivos generados: {result.get('files_generated', 0)}")
        
        if result.get('status') == 'task_completed':
            print("üìã ==== AN√ÅLISIS DETALLADO GENERADO ====")
            analysis = result.get("specific_answer", "No hay respuesta espec√≠fica disponible")
            print(f"Longitud del an√°lisis: {len(analysis)} caracteres")
            
            summary = result.get("extraction_summary", {})
            print(f"Caracteres procesados: {summary.get('total_characters', 0):,}")
            print(f"Categor√≠as financieras: {summary.get('financial_data_categories', 0)}")
            print(f"Confianza: {summary.get('confidence', 0.8):.1%}")
            print(f"Calidad: {summary.get('quality', 'unknown').title()}")
            print("‚úÖ An√°lisis detallado con LLM especializado completado")
        else:
            print(f"‚ùå Error: {result.get('error_details', 'Error desconocido')}")
        
        print("üéâ An√°lisis de cuenta de resultados completado!")
        print("ü§ñ IncomeREACTAgent con an√°lisis detallado disponible para sistema multi-agente")
        
    except Exception as e:
        print(f"‚ùå Error durante la ejecuci√≥n: {e}")
        raise

if __name__ == "__main__":
    main()
